{"ast":null,"code":"var clientId = '4f54bf48b31c4c38818c9d02a8fbaf44';\nvar redirectUri = 'http://localhost:3000/';\nvar accessToken;\nvar Spotify = {\n  // Gets access token from Spotify\n  getAccessToken: function getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    var hasAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    var hasExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (hasAccessToken && hasExpiresIn) {\n      accessToken = hasAccessToken[1];\n      var expiresIn = Number(hasExpiresIn[1]);\n      window.setTimeout(function () {\n        return accessToken = '';\n      }, expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      var accessUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientId, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);\n      window.location = accessUrl;\n    }\n  },\n  // Uses access token to return a response from the Spoitify API using user serach term from SearchBar\n  search: function search(term) {\n    var accessToken = Spotify.getAccessToken();\n    return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term), {\n      headers: {\n        Authorization: \"Bearer \".concat(accessToken)\n      }\n    }).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      } else {\n        console.log('API request failed');\n      }\n    }).then(function (jsonResponse) {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(function (track) {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n          cover: track.album.images[2].url,\n          preview: track.preview_url\n        };\n      });\n    });\n  },\n  // Gets a user's ID from Spotify, creates a new playlist on user's account, and adds tracks to that playlist\n  savePlaylist: function savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs.length) {\n      return;\n    }\n\n    var accessToken = Spotify.getAccessToken();\n    var headers = {\n      Authorization: \"Bearer \".concat(accessToken)\n    };\n    var userId; // Return user's ID from Spotify API\n\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(function (jsonResponse) {\n      userId = jsonResponse.id; // Adds playlist to user's account\n\n      return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists\"), {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: playlistName\n        })\n      }).then(function (response) {\n        if (response.ok) {\n          return response.json();\n        } else {\n          console.log('API request failed');\n        }\n      }).then(function (jsonResponse) {\n        var playlistId = jsonResponse.id; // Adds tracks to new playlist\n\n        return fetch(\"https://api.spotify.com/v1/users/\".concat(userId, \"/playlists/\").concat(playlistId, \"/tracks\"), {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackURIs\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/benjamin/Desktop/project-jammming/jammming/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","hasAccessToken","window","location","href","match","hasExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","ok","json","console","log","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","cover","images","url","preview","preview_url","savePlaylist","playlistName","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientId = '4f54bf48b31c4c38818c9d02a8fbaf44';\nconst redirectUri = 'http://localhost:3000/';\n\nlet accessToken;\n\nconst Spotify = {\n\n    // Gets access token from Spotify\n    getAccessToken() {\n        if(accessToken) {\n            return accessToken;\n        }\n        const hasAccessToken = window.location.href.match(/access_token=([^&]*)/);\n        const hasExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n        if (hasAccessToken && hasExpiresIn) {\n            accessToken = hasAccessToken[1];\n            const expiresIn = Number(hasExpiresIn[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    // Uses access token to return a response from the Spoitify API using user serach term from SearchBar\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(\n            response => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    console.log('API request failed');\n                }\n        }).then(\n            jsonResponse => {\n            if(!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri,\n                cover: track.album.images[2].url,\n                preview: track.preview_url\n            }));\n        });\n    },\n\n    // Gets a user's ID from Spotify, creates a new playlist on user's account, and adds tracks to that playlist\n    savePlaylist(playlistName, trackURIs) {\n        if (!playlistName || !trackURIs.length) {\n            return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessToken}`\n        };\n        let userId;\n\n        // Return user's ID from Spotify API\n        return fetch('https://api.spotify.com/v1/me', {\n            headers: headers\n        }).then(\n            response => {\n                if(response.ok) {\n                    return response.json();\n                }\n        }).then(\n            jsonResponse => {\n                userId = jsonResponse.id;\n\n                // Adds playlist to user's account\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({name: playlistName})\n                }).then(\n                    response => {\n                    if (response.ok) {\n                        return response.json();\n                    } else {\n                        console.log('API request failed');\n                    }\n                }).then(\n                    jsonResponse => {\n                        const playlistId = jsonResponse.id;\n\n                        // Adds tracks to new playlist\n                        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                            headers: headers,\n                            method: 'POST',\n                            body: JSON.stringify({ uris: trackURIs})\n                        });\n                    });\n            });\n    }\n}\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}