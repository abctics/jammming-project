{"ast":null,"code":"import _classCallCheck from \"/Users/benjamin/Desktop/project-jammming/jammming/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/benjamin/Desktop/project-jammming/jammming/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/benjamin/Desktop/project-jammming/jammming/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/benjamin/Desktop/project-jammming/jammming/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/benjamin/Desktop/project-jammming/jammming/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/benjamin/Desktop/project-jammming/jammming/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/benjamin/Desktop/project-jammming/jammming/src/Components/App/App.js\";\nimport React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    };\n    _this.addTrack = _this.addTrack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeTrack = _this.removeTrack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.savePlaylist = _this.savePlaylist.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.search = _this.search.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updatePlaylistName = _this.updatePlaylistName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // Adds track from Search Results to Playlist\n\n\n  _createClass(App, [{\n    key: \"addTrack\",\n    value: function addTrack(track) {\n      var tracks = this.state.playlistTracks;\n      tracks.push(track);\n      this.setState({\n        playlistTracks: tracks\n      });\n    } // Removes track from Playlist by filtering out track id from playlistTracks\n\n  }, {\n    key: \"removeTrack\",\n    value: function removeTrack(track) {\n      var tracks = this.state.playlistTracks;\n      tracks = tracks.filter(function (current) {\n        return current.id !== track.id;\n      });\n      this.setState({\n        playlistTracks: tracks\n      });\n    } // Sends search term request to spotify and returns results of search in the search results panel\n\n  }, {\n    key: \"search\",\n    value: function search(term) {\n      var _this2 = this;\n\n      Spotify.search(term).then(function (searchResults) {\n        _this2.setState({\n          searchResults: searchResults\n        });\n      });\n    } // Updates the name of the Playlist\n\n  }, {\n    key: \"updatePlaylistName\",\n    value: function updatePlaylistName(name) {\n      this.setState({\n        playlistName: name\n      });\n    } // Saves playlist name and tracks to user's account\n\n  }, {\n    key: \"savePlaylist\",\n    value: function savePlaylist() {\n      var _this3 = this;\n\n      var trackURIs = this.state.playlistTracks.map(function (track) {\n        return track.uri;\n      });\n      Spotify.savePlaylist(this.state.playlistName, trackURIs).then(function () {\n        _this3.setState({\n          playlistName: 'New Playlist',\n          playlistTracks: []\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Ja\", React.createElement(\"span\", {\n        className: \"highlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"mmm\"), \"ing\"), React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(SearchBar, {\n        onSearch: this.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"App-playlist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(SearchResults, {\n        searchResults: this.state.searchResults,\n        onAdd: this.addTrack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(Playlist, {\n        playlistName: this.state.playlistName,\n        playlistTracks: this.state.playlistTracks,\n        onRemove: this.removeTrack,\n        onNameChange: this.updatePlaylistName,\n        onSave: this.savePlaylist,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/benjamin/Desktop/project-jammming/jammming/src/Components/App/App.js"],"names":["React","SearchBar","SearchResults","Playlist","Spotify","App","props","state","searchResults","playlistName","playlistTracks","addTrack","bind","removeTrack","savePlaylist","search","updatePlaylistName","track","tracks","push","setState","filter","current","id","term","then","name","trackURIs","map","uri","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n  }\n  \n  // Adds track from Search Results to Playlist\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  // Removes track from Playlist by filtering out track id from playlistTracks\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(current => current.id !== track.id);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  // Sends search term request to spotify and returns results of search in the search results panel\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    });\n  }\n\n  // Updates the name of the Playlist\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  // Saves playlist name and tracks to user's account\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} \n                           onAdd={this.addTrack}/>\n            <Playlist playlistName={this.state.playlistName} \n                      playlistTracks={this.state.playlistTracks}\n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}